name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: 'New release with bug fixes and improvements'

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Fetch full history including all tags

    - name: Validate version format
      run: |
        if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must be in format v1.0.0"
          exit 1
        fi

    - name: Check if release already exists
      run: |
        # Check if GitHub release already exists
        if gh release view ${{ github.event.inputs.version }} >/dev/null 2>&1; then
          echo "Warning: Release ${{ github.event.inputs.version }} already exists on GitHub"
          echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update package.json version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        VERSION_NO_V="${VERSION#v}"
        
        # Update package.json
        sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION_NO_V\"/" package.json
        
        # Verify the change
        grep "\"version\": \"$VERSION_NO_V\"" package.json

    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json
        
        # Only commit if there are changes
        if git diff --staged --quiet; then
          echo "No version changes to commit"
        else
          git commit -m "Bump version to ${{ github.event.inputs.version }}"
          git push
        fi

    - name: Create and push tag
      run: |
        # Check if tag already exists
        if git rev-parse ${{ github.event.inputs.version }} >/dev/null 2>&1; then
          echo "Tag ${{ github.event.inputs.version }} already exists"
        else
          git tag ${{ github.event.inputs.version }}
          git push origin ${{ github.event.inputs.version }}
        fi

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="${{ github.event.inputs.version }}"
        CUSTOM_NOTES="${{ github.event.inputs.release_notes }}"
        
        # Get the last tag (if any) for comparison
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          COMMIT_RANGE="$LAST_TAG..HEAD~1"
        else
          COMMIT_RANGE="HEAD~10..HEAD~1"
        fi
        
        # Generate automatic release notes from commits
        echo "## What's Changed" > release_notes.md
        if [ -n "$CUSTOM_NOTES" ]; then
          echo "" >> release_notes.md
          echo "$CUSTOM_NOTES" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "### Commits since last release:" >> release_notes.md
        git log $COMMIT_RANGE --oneline --no-merges | sed 's/^/- /' >> release_notes.md || echo "- Initial release" >> release_notes.md
        
        echo "" >> release_notes.md
        echo "## ðŸŽ® Play the Game" >> release_notes.md
        echo "- **Live Demo**: https://commjoen.github.io/Multiplier/" >> release_notes.md
        echo "- **Docker**: \`docker run -p 3000:3000 ghcr.io/commjoen/multiplier:${VERSION#v}\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## ðŸ“¦ Docker Images" >> release_notes.md
        echo "- \`ghcr.io/commjoen/multiplier:${VERSION#v}\` - This specific version" >> release_notes.md
        echo "- \`ghcr.io/commjoen/multiplier:main\` - Latest main branch" >> release_notes.md

    - name: Create GitHub Release
      if: env.RELEASE_EXISTS == 'false'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: "Multiplication Practice ${{ github.event.inputs.version }}"
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: true

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set Docker tag
      id: docker_tag
      run: |
        VERSION="${{ github.event.inputs.version }}"
        VERSION_NO_V="${VERSION#v}"
        echo "version_no_v=$VERSION_NO_V" >> $GITHUB_OUTPUT

    - name: Build and push Docker image with version tag
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/multiplier:${{ github.event.inputs.version }}
          ghcr.io/${{ github.repository_owner }}/multiplier:${{ steps.docker_tag.outputs.version_no_v }}
          ghcr.io/${{ github.repository_owner }}/multiplier:latest
        labels: |
          org.opencontainers.image.title=Multiplication Practice
          org.opencontainers.image.description=A mobile-first multiplication practice app
          org.opencontainers.image.version=${{ github.event.inputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}